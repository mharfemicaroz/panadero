import{J as c,K as y,a as p}from"./index.81ed66ed.js";const o={async create(a){return(await c.post("/branch",a)).data},async getById(a){return(await c.get(`/branch/${a}`)).data},async updateById(a,n){return(await c.put(`/branch/${a}`,n)).data},async delete(a){return(await c.delete(`/branch/${a}`)).data},async list(a){return(await c.get("/branch",{params:a})).data}},B=y("branch",()=>{const a=p([]),n=p(null);return{branches:a,branch:n,fetchAll:async s=>{var r,t;try{const e=await o.list(s);a.value=e}catch(e){throw new Error(((t=(r=e.response)==null?void 0:r.data)==null?void 0:t.message)||"Failed to fetch branches")}},fetchById:async s=>{var r,t;try{const e=await o.getById(s);n.value=e}catch(e){throw new Error(((t=(r=e.response)==null?void 0:r.data)==null?void 0:t.message)||"Failed to fetch branch")}},create:async s=>{var r,t;try{const e=await o.create(s);a.value.push(e)}catch(e){throw new Error(((t=(r=e.response)==null?void 0:r.data)==null?void 0:t.message)||"Failed to create branch")}},updateById:async(s,r)=>{var t,e;try{const d=await o.updateById(s,r),h=a.value.data.findIndex(i=>i.id===s);h!==-1&&(a.value.data[h]=d)}catch(d){throw new Error(((e=(t=d.response)==null?void 0:t.data)==null?void 0:e.message)||"Failed to update branch")}},deleteById:async s=>{var r,t;try{await o.delete(s),a.value=a.value.data.filter(e=>e.id!==s)}catch(e){throw new Error(((t=(r=e.response)==null?void 0:r.data)==null?void 0:t.message)||"Failed to delete branch")}}}});export{B as u};
